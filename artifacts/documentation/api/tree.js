var tree = [["Eloquent",,"",
                [["Typhax",,"",
                [["Comparator","Eloquent\/Typhax\/Comparator.html","",
                [["TypeEquivalenceComparator","Eloquent\/Typhax\/Comparator\/TypeEquivalenceComparator.html","",
                [        ]],["TypeEquivalenceComparatorVisitor","Eloquent\/Typhax\/Comparator\/TypeEquivalenceComparatorVisitor.html","",
                [        ]]        ]],["Lexer","Eloquent\/Typhax\/Lexer.html","",
                [["Lexer","Eloquent\/Typhax\/Lexer\/Lexer.html","",
                [        ]],["Token","Eloquent\/Typhax\/Lexer\/Token.html","",
                [        ]]        ]],["Parser","Eloquent\/Typhax\/Parser.html","",
                [["Exception","Eloquent\/Typhax\/Parser\/Exception.html","",
                [["ParseException","Eloquent\/Typhax\/Parser\/Exception\/ParseException.html"," < LogicException",
                [        ]],["UnexpectedTokenException","Eloquent\/Typhax\/Parser\/Exception\/UnexpectedTokenException.html"," < ParseException",
                [        ]],["UnsupportedAttributeException","Eloquent\/Typhax\/Parser\/Exception\/UnsupportedAttributeException.html"," < ParseException",
                [        ]]        ]],["Parser","Eloquent\/Typhax\/Parser\/Parser.html","",
                [        ]]        ]],["Renderer","Eloquent\/Typhax\/Renderer.html","",
                [["TypeRenderer","Eloquent\/Typhax\/Renderer\/TypeRenderer.html","",
                [        ]]        ]],["Resolver","Eloquent\/Typhax\/Resolver.html","",
                [["ObjectTypeClassNameResolver","Eloquent\/Typhax\/Resolver\/ObjectTypeClassNameResolver.html","",
                [        ]]        ]],["Type","Eloquent\/Typhax\/Type.html","",
                [["AndType","Eloquent\/Typhax\/Type\/AndType.html"," < CompositeType",
                [        ]],["ArrayType","Eloquent\/Typhax\/Type\/ArrayType.html","",
                [        ]],["BooleanType","Eloquent\/Typhax\/Type\/BooleanType.html","",
                [        ]],["CallableType","Eloquent\/Typhax\/Type\/CallableType.html","",
                [        ]],["CompositeType","Eloquent\/Typhax\/Type\/CompositeType.html","",
                [        ]],["ExtensionType","Eloquent\/Typhax\/Type\/ExtensionType.html","",
                [        ]],["FloatType","Eloquent\/Typhax\/Type\/FloatType.html","",
                [        ]],["IntegerType","Eloquent\/Typhax\/Type\/IntegerType.html","",
                [        ]],["MixedType","Eloquent\/Typhax\/Type\/MixedType.html","",
                [        ]],["NullType","Eloquent\/Typhax\/Type\/NullType.html","",
                [        ]],["NumericType","Eloquent\/Typhax\/Type\/NumericType.html","",
                [        ]],["ObjectType","Eloquent\/Typhax\/Type\/ObjectType.html","",
                [        ]],["OrType","Eloquent\/Typhax\/Type\/OrType.html"," < CompositeType",
                [        ]],["ResourceType","Eloquent\/Typhax\/Type\/ResourceType.html","",
                [        ]],["StreamType","Eloquent\/Typhax\/Type\/StreamType.html","",
                [        ]],["StringType","Eloquent\/Typhax\/Type\/StringType.html","",
                [        ]],["StringableType","Eloquent\/Typhax\/Type\/StringableType.html","",
                [        ]],["TraversablePrimaryType","Eloquent\/Typhax\/Type\/TraversablePrimaryType.html","",
                [        ]],["TraversableType","Eloquent\/Typhax\/Type\/TraversableType.html","",
                [        ]],["TupleType","Eloquent\/Typhax\/Type\/TupleType.html","",
                [        ]],["Type","Eloquent\/Typhax\/Type\/Type.html","",
                [        ]],["Visitor","Eloquent\/Typhax\/Type\/Visitor.html","",
                [        ]]        ]]        ]]        ]]        ]

